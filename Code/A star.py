import numpy as np
import time
from grid import grid

def A_star(G, source, destination):
    open_nodes = [source]

    coordinates = np.array([np.array(range(G.shape[0]))%int(G.shape[0]**0.5), np.array(range(G.shape[0]))//int(G.shape[0]**0.5)]).transpose()

    parent = np.ones(G.shape[0], np.int)*(-1)
    g = np.ones(G.shape[0])*np.inf
    h = abs(coordinates[:,0] - coordinates[destination,0]) + abs(coordinates[:,1] - coordinates[destination,1])

    parent[source] = source
    g[source] = 0

    while len(open_nodes) != 0:
        u = open_nodes[np.argmin(g[open_nodes] + h[open_nodes])]
        open_nodes.remove(u)

        if u == destination:
            break
        for v in range(G.shape[0]):
            if G[u][v] != -1 and u != v:
                v_cost = g[u] + G[u][v]
                if g[v] > v_cost:
                    g[v] = v_cost
                    open_nodes.append(v)
                    parent[v] = u
    
    if parent[destination] == -1:
        return -1
    else:
        path = [destination]
        while path[-1] != source:
            path.append(parent[path[-1]])
        return path[::-1]

# dim = 30
# obstacles = [(4, 17), (15, 4), (4, 13), (5, 13), (28, 8), (29, 25), (21, 21), (18, 17), (27, 4), (7, 9), (21, 26), (28, 13), (13, 22), (9, 18), (17, 22), (7, 14), (3, 27), (26, 5), (20, 18), (16, 14), (23, 1), (16, 10), (3, 15), (21, 23), (22, 23), (1, 24), (16, 15), (25, 19), (7, 24), (27, 2), (21, 15), (17, 11), (3, 20), (13, 24), (26, 15), (15, 7), (27, 28), (25, 11), (27, 11), (2, 4), (7, 29), (10, 29), (0, 8), (28, 20), (14, 12), (16, 29), (6, 4), (14, 8), (9, 17), (26, 4), (25, 4), (7, 23), (26, 11), (27, 3), (3, 21), (2, 24), (15, 8), (17, 12), (26, 2), (21, 20), (26, 3), (25, 3), (26, 10), (13, 12), (16, 22), (3, 24), (4, 20), (16, 7), (2, 15), (25, 2), (29, 20), (10, 18), (5, 12), (6, 3), (27, 10), (26, 6), (10, 17), (21, 22), (0, 7), (20, 21), (3, 4), (24, 11), (6, 5), (5, 17), (28, 3), (4, 4), (3, 16), (19, 21), (28, 21), (4, 21), (25, 5), (11, 18), (4, 16), (24, 2), (4, 18), (2, 3), (5, 5), (10, 19), (1, 7), (6, 24), (29, 8), (15, 5), (28, 14), (8, 24), (8, 9), (8, 18), (24, 12), (7, 18), (22, 24), (4, 5), (14, 9), (26, 16), (20, 20), (23, 2), (14, 24), (6, 14), (16, 12), (6, 9), (9, 29), (9, 9), (4, 24), (3, 17), (3, 26), (8, 25), (15, 14), (14, 22), (20, 26), (2, 14), (19, 26), (4, 6), (22, 1), (8, 23), (22, 20), (25, 10), (26, 1), (5, 24), (5, 16), (16, 4), (23, 0), (25, 15), (17, 17), (29, 13), (2, 7), (1, 8), (13, 11), (17, 18), (22, 2), (18, 11), (23, 3), (27, 12), (9, 28), (4, 12), (18, 12), (5, 23), (26, 17), (22, 0), (3, 13), (24, 3), (25, 17), (8, 29), (8, 19), (9, 23), (19, 18), (26, 18), (13, 10), (26, 9), (3, 12), (28, 12), (26, 28), (21, 1), (15, 9), (21, 24), (10, 23), (23, 23), (5, 4), (25, 18), (0, 6), (15, 15), (7, 25), (13, 13), (15, 6), (26, 19), (3, 19), (8, 26), (6, 2), (7, 28), (16, 13), (12, 24), (29, 14), (24, 10), (20, 19), (17, 10), (3, 18), (4, 27), (25, 12), (28, 28), (28, 2), (14, 10), (25, 9), (16, 23), (9, 19), (5, 14), (4, 22), (15, 13), (6, 12), (23, 20), (3, 3), (14, 11), (6, 16), (14, 5), (19, 27), (28, 1), (6, 11), (4, 7), (22, 25), (7, 17), (4, 19), (9, 16), (25, 16), (13, 8), (29, 9), (16, 11), (7, 10), (22, 21), (9, 22), (16, 8), (4, 23), (20, 22), (24, 19), (17, 7), (18, 18), (17, 23), (25, 14), (16, 9), (6, 15), (19, 19), (26, 12), (22, 22), (27, 5), (6, 18), (7, 26), (23, 25), (16, 16), (17, 13), (3, 2), (28, 4), (28, 22), (2, 23), (6, 23), (1, 6), (20, 23), (8, 10), (20, 27), (7, 5), (1, 23), (23, 19), (6, 28), (2, 26), (15, 24), (28, 10), (2, 17), (23, 4), (27, 9), (15, 23), (11, 17), (5, 15), (19, 11), (23, 21), (28, 11), (5, 3), (29, 12), (7, 2), (9, 15), (4, 25), (12, 18), (23, 22), (2, 5), (15, 25), (19, 12), (24, 15), (20, 12), (10, 15), (10, 14), (17, 16), (7, 16), (25, 8), (3, 7), (20, 1), (3, 14), (12, 22), (2, 22), (7, 19), (23, 18), (6, 10), (15, 12), (20, 0), (5, 6), (6, 27), (19, 20), (24, 5), (22, 26)]
# additional_obstacles = [(18, 22), (18, 23), (19, 22), (19, 23), (25, 13)]
# use_additional = False
# g = grid(dim, obstacles, additional_obstacles)
# G = g.get_matrix(use_additional)
# path = A_star(G, 0, dim*dim-1)
# print('Path length:', len(path)-1)
# g.visualize(path, use_additional)